Faster version of ``np.isin`` and ``np.in1d`` for integer arrays
----------------------------------------------------------------
``np.in1d`` (used by ``np.isin``) can now switch to a faster algorithm
(up to >10x faster) when it is passed two integer arrays.
The algorithm has similarities to a counting sort in that it
uses the ``ar2`` (``test_elements`` in ``np.isin``) argument to
index a boolean array, setting them to ``True`` where elements exist.
The ``ar1`` (``elements`` in ``np.isin``) argument then indexes
this array of booleans. Different memory scaling is also encountered,
and can be smaller or larger depending on configuration; this is described
in the docstring.